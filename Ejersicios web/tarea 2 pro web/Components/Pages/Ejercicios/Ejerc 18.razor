@page "/Ejerc_18"
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h1 class="text-2xl font-bold mb-4">Mayor Primo que Termina en 3</h1>

<div class="mb-4">
    <label for="inputArray" class="block mb-2">Introduce 10 números enteros (separados por comas):</label>
    <input type="text" @bind="inputArray" id="inputArray" class="input-box" />
</div>

<button class="btn btn-primary" @onclick="FindMaxPrimeEndingIn3">Buscar Mayor Primo que Termina en 3</button>

@if (result.HasValue)
{
    <div class="mt-4">
        @if (result == -1)
        {
            <p class="result-text">No se encontró ningún número primo que termine en 3 en el vector.</p>
        }
        else
        {
            <p class="result-text">El mayor primo que termina en 3 se encuentra en la posición @result.</p>
        }
    </div>
}

<div class="mt-6">
    <button class="btn btn-secondary" @onclick="GoToMathProblemSelector">Volver a los Problemas Matemáticos</button>
</div>

@code {
    private string inputArray;
    private int? result;

    private void FindMaxPrimeEndingIn3()
    {
        try
        {
            // Convertir la cadena de entrada en un arreglo de enteros
            var numbers = inputArray.Split(',').Select(int.Parse).ToArray();

            if (numbers.Length == 10)
            {
                int maxPrime = -1;
                int maxPosition = -1;

                for (int i = 0; i < numbers.Length; i++)
                {
                    if (IsPrime(numbers[i]) && numbers[i] % 10 == 3)
                    {
                        if (numbers[i] > maxPrime)
                        {
                            maxPrime = numbers[i];
                            maxPosition = i;
                        }
                    }
                }

                result = (maxPosition != -1) ? maxPosition : -1;
            }
            else
            {
                result = null; // Si el vector no tiene exactamente 10 elementos
            }
        }
        catch
        {
            result = null; // En caso de error con el formato de entrada
        }
    }

    private bool IsPrime(int number)
    {
        if (number <= 1) return false;
        for (int i = 2; i * i <= number; i++)
        {
            if (number % i == 0) return false;
        }
        return true;
    }

    private void GoToMathProblemSelector()
    {
        Navigation.NavigateTo("/math-problem");
    }
}

<style>
    .input-box {
        padding: 10px;
        border: 2px solid #007bff;
        border-radius: 5px;
        width: 100%;
        max-width: 300px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .btn-primary {
        background: #007bff;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        transition: background 0.3s;
        margin-top: 10px;
    }

        .btn-primary:hover {
            background: #0056b3;
        }

    .btn-secondary {
        background: #6c757d;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        transition: background 0.3s;
        margin-top: 20px;
    }

        .btn-secondary:hover {
            background: #5a6268;
        }

    .result-text {
        font-size: 1.25rem;
        color: #333;
        margin-top: 10px;
        font-weight: bold;
    }
</style>
